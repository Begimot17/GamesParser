import asyncio
import logging
import re
from datetime import datetime
from typing import List, Optional, Union
from urllib.parse import unquote, urlparse, parse_qsl

import telegram
from telegram import Bot, InputMediaPhoto
from telegram.constants import ParseMode
from telegram.error import TelegramError, RetryAfter, NetworkError
from telegram.request import HTTPXRequest

from models.models import Post
from config.config import Config

logger = logging.getLogger(__name__)


class TelegramNewsBot:
    def __init__(
        self,
        token: str,
        channel_id: str,
        message_delay: int = 10,
        retry_delay: int = 5,
        max_retries: int = 3,
    ):
        # Clean the token by removing any comments or extra text
        self.token = token.split('#')[0].strip()
        if not self.token:
            raise ValueError("Invalid bot token provided")
            
        self.channel_id = channel_id
        self.message_delay = message_delay
        self.retry_delay = retry_delay
        self.max_retries = max_retries
        self.max_message_length = 4000
        self.max_caption_length = 1024
        self.bot = telegram.Bot(token=self.token, request=HTTPXRequest())
        self.max_images = 5
        self._processed_ids = set()

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞."""
        if self.bot:
            self._processed_ids.clear()  # –û—á–∏—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
            await self.bot.close()

    def _split_text(self, text: str, max_length: int) -> List[str]:
        """–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É."""
        if len(text) <= max_length:
            return [text]

        parts = []
        current_part = ""
        for line in text.split("\n"):
            if len(current_part) + len(line) + 1 > max_length:
                if current_part:
                    parts.append(current_part.strip())
                current_part = line
            else:
                if current_part:
                    current_part += "\n"
                current_part += line

        if current_part:
            parts.append(current_part.strip())

        return parts

    async def _send_with_retry(self, method, *args, **kwargs):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏."""
        last_error = None
        for attempt in range(self.max_retries):
            try:
                result = await method(*args, **kwargs)
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if result:
                    return result
                # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç None, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
                logger.warning(f"Method returned None, attempt {attempt + 1}/{self.max_retries}")
                await asyncio.sleep(self.retry_delay * (attempt + 1))
            except RetryAfter as e:
                last_error = e
                if attempt == self.max_retries - 1:
                    raise
                wait_time = e.retry_after
                logger.warning(f"Rate limit hit, waiting {wait_time} seconds...")
                await asyncio.sleep(wait_time)
            except NetworkError as e:
                last_error = e
                if attempt == self.max_retries - 1:
                    raise
                logger.warning(f"Network error, attempt {attempt + 1}/{self.max_retries}: {str(e)}")
                await asyncio.sleep(self.retry_delay * (attempt + 1))
            except TelegramError as e:
                logger.error(f"Telegram error: {str(e)}")
                raise

        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—à–∏–±–∫—É
        if last_error:
            raise last_error
        return None

    async def send_message(
        self,
        text: str,
        images: Optional[List[str]] = None,
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª."""
        try:
            if images:
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                images = images[:self.max_images]
                
                # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
                media_group = []
                for i, image_url in enumerate(images):
                    # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å
                    caption = text if i == 0 else None
                    media_group.append(
                        InputMediaPhoto(
                            media=image_url,
                            caption=caption,
                            parse_mode=ParseMode.HTML
                        )
                    )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
                result = await self._send_with_retry(
                    self.bot.send_media_group,
                    chat_id=self.channel_id,
                    media=media_group
                )
                return bool(result)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ

            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                result = await self._send_with_retry(
                    self.bot.send_message,
                    chat_id=self.channel_id,
                    text=text,
                    parse_mode=ParseMode.HTML
                )
                return bool(result)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ

        except Exception as e:
            logger.error(f"Error sending message: {str(e)}")
            return False

    def _is_valid_url(self, url: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL"""
        try:
            result = urlparse(url)
            return all([result.scheme, result.netloc])
        except Exception as e:
            logger.error(f"Error validating URL {url}: {e}")
            return False

    def _clean_text(self, text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –≤—Å–µ—Ö –æ—Ç—Å—Ç—É–ø–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not text:
            return ""
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        text = text.strip()
        # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–±–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª
        text = re.sub(r"\s+", " ", text)
        # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª
        text = re.sub(r"\n+", " ", text)
        # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏
        text = re.sub(r"\.{3,}", "...", text)
        # –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω—ã
        text = re.sub(r'https?://(?:store\.)?steampowered\.com/\S+', '', text)
        text = re.sub(r'https?://(?:store\.)?epicgames\.com/\S+', '', text)
        text = re.sub(r'https?://(?:store\.)?gog\.com/\S+', '', text)
        text = re.sub(r'https?://(?:store\.)?itch\.io/\S+', '', text)
        return text

    def _format_date(self, date_str: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY"""
        try:
            for fmt in ["%Y-%m-%d %H:%M:%S", "%Y-%m-%d %H:%M", "%Y-%m-%d"]:
                try:
                    date = datetime.strptime(date_str, fmt)
                    return date.strftime("%d.%m.%Y")
                except ValueError:
                    continue
            return date_str
        except Exception as e:
            logger.warning(f"Error formatting date {date_str}: {e}")
            return date_str

    def _format_store_link(self, store_name: str, store_url: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω"""
        store_name = self._clean_text(store_name)
        if store_name.lower() == "steam":
            return f"üéÆ Steam: {store_url}"
        elif store_name.lower() == "epic games":
            return f"üéÆ Epic: {store_url}"
        elif store_name.lower() == "gog":
            return f"üéÆ GOG: {store_url}"
        return f"üéÆ {store_name}: {store_url}"

    def _safe_unquote(self, text: str) -> str:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ URL-encoded —Å—Ç—Ä–æ–∫–∏"""
        try:
            if "%" in text:
                return unquote(text)
            return text
        except Exception as e:
            logger.warning(f"Error decoding text: {e}")
            return text

    def _clean_url(self, url: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ URL –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            # –ï—Å–ª–∏ —ç—Ç–æ HTML-—Å—Å—ã–ª–∫–∞, –∏–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ href –∏–ª–∏ title
            if '<a' in url:
                # –ò—â–µ–º URL –≤ –∞—Ç—Ä–∏–±—É—Ç–µ href
                href_match = re.search(r'href="([^"]+)"', url)
                if href_match:
                    url = href_match.group(1)
                # –ò—â–µ–º URL –≤ –∞—Ç—Ä–∏–±—É—Ç–µ title
                title_match = re.search(r'title="([^"]+)"', url)
                if title_match:
                    url = title_match.group(1)

            parsed = urlparse(url)
            
            # –ï—Å–ª–∏ —ç—Ç–æ URL –ü–∏–∫–∞–±—É, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞–≥–∞–∑–∏–Ω
            if "pikabu.ru" in parsed.netloc:
                # –ò—â–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä 'u' –∏–ª–∏ 't' –≤ URL, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É
                query_params = dict(parse_qsl(parsed.query))
                direct_url = query_params.get('u') or query_params.get('t')
                if direct_url:
                    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL
                    direct_url = unquote(direct_url)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω
                    if any(store in direct_url.lower() for store in ['steampowered.com', 'epicgames.com', 'gog.com', 'itch.io']):
                        return direct_url
            
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ URL –ü–∏–∫–∞–±—É –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É,
            # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL —Å—Å—ã–ª–∫–æ–π –Ω–∞ –º–∞–≥–∞–∑–∏–Ω
            if any(store in url.lower() for store in ['steampowered.com', 'epicgames.com', 'gog.com', 'itch.io']):
                # –û—á–∏—â–∞–µ–º URL –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                return f"{parsed.scheme}://{parsed.netloc}{parsed.path}"
            
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π URL
            return url
            
        except Exception as e:
            logger.warning(f"Error cleaning URL {url}: {e}")
            return url

    def _format_message(self, post: Post) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Å—Å—ã–ª–∫–æ–π
            title_link = f'<a href="{post.link}">{post.title}</a>'

            # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω—ã –≤ —Ç–µ–∫—Å—Ç–µ
            store_links = []
            for store, url in post.stores.items():
                # –û—á–∏—â–∞–µ–º URL –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                clean_url = self._clean_url(url)
                store_links.append(f'<a href="{clean_url}">{store}</a>')

            # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω—ã –≤ —Ç–µ–∫—Å—Ç–µ
            text = post.text
            store_patterns = {
                'Steam': r'https?://(?:store\.)?steampowered\.com/\S+',
                'Epic Games': r'https?://(?:store\.)?epicgames\.com/\S+',
                'GOG': r'https?://(?:store\.)?gog\.com/\S+',
                'itch.io': r'https?://(?:store\.)?itch\.io/\S+'
            }

            # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –≤ HTML-—Ç–µ–∫—Å—Ç–µ
            html_pattern = r'<a[^>]+(?:href|title)="([^"]+)"[^>]*>'
            matches = re.findall(html_pattern, text)
            for url in matches:
                clean_url = self._clean_url(url)
                if any(store in clean_url.lower() for store in ['steampowered.com', 'epicgames.com', 'gog.com', 'itch.io']):
                    store_name = 'Steam' if 'steampowered.com' in clean_url.lower() else \
                               'Epic Games' if 'epicgames.com' in clean_url.lower() else \
                               'GOG' if 'gog.com' in clean_url.lower() else \
                               'itch.io'
                    if clean_url not in [url for _, url in post.stores.items()]:
                        store_links.append(f'<a href="{clean_url}">{store_name}</a>')
                        # –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫—É –∏–∑ —Ç–µ–∫—Å—Ç–∞
                        text = re.sub(f'<a[^>]+(?:href|title)="{re.escape(url)}"[^>]*>.*?</a>', '', text)

            # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
            store_mentions = {
                'Epic Games': r'Epic\s+Games',
                'Steam': r'Steam',
                'GOG': r'GOG',
                'itch.io': r'itch\.io'
            }

            for store_name, pattern in store_mentions.items():
                if re.search(pattern, text, re.IGNORECASE):
                    # –ï—Å–ª–∏ –º–∞–≥–∞–∑–∏–Ω —É–ø–æ–º—è–Ω—É—Ç, –Ω–æ —Å—Å—ã–ª–∫–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–∞–≥–∞–∑–∏–Ω–∞
                    store_url = {
                        'Epic Games': 'https://store.epicgames.com',
                        'Steam': 'https://store.steampowered.com',
                        'GOG': 'https://www.gog.com',
                        'itch.io': 'https://itch.io'
                    }[store_name]
                    if store_url not in [url for _, url in post.stores.items()]:
                        store_links.append(f'<a href="{store_url}">{store_name}</a>')

            for store_name, pattern in store_patterns.items():
                matches = re.findall(pattern, text)
                for url in matches:
                    clean_url = self._clean_url(url)
                    if clean_url not in [url for _, url in post.stores.items()]:
                        store_links.append(f'<a href="{clean_url}">{store_name}</a>')
                        # –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫—É –∏–∑ —Ç–µ–∫—Å—Ç–∞
                        text = re.sub(pattern, '', text)

            stores_text = (
                " | ".join(store_links) if store_links else "–ù–µ—Ç —Å—Å—ã–ª–æ–∫ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω—ã"
            )

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata = []
            if post.metadata.date:
                metadata.append(f"üìÖ {post.metadata.date}")
            if post.metadata.tags:
                tags_text = " ".join([f"#{tag}" for tag in post.metadata.tags])
                metadata.append(f"üè∑Ô∏è {tags_text}")

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥
            rating_text = f"‚≠ê {post.rating}" if post.rating else ""

            # –û–±—Ä–µ–∑–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ text –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤
            text = text[:500] + "..." if len(text) > 500 else text

            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            message_parts = [
                f"üéÆ {title_link}",
                f"üìä {rating_text}",
                f"üõí {stores_text}",
                *metadata,
                "",
                text
            ]

            return "\n".join(message_parts)

        except Exception as e:
            logger.error(f"Error formatting message: {str(e)}")
            return f"Error formatting message: {str(e)}"

    async def send_new_posts(self, new_posts: List[Post]) -> List[int]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª"""
        sent_post_ids = []
        for post in new_posts:
            try:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç—ã –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                if not post.images:
                    logger.info(f"Skipping post {post.id} - no images found")
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –ø–æ—Å—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
                if post.id in self._processed_ids:
                    logger.info(f"Post {post.id} was already sent, skipping...")
                    continue

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = self._format_message(post)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                success = await self.send_message(
                    text=message,
                    images=post.images[:self.max_images] if post.images else None
                )

                if success:
                    # –ü–æ–º–µ—á–∞–µ–º –ø–æ—Å—Ç –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
                    self._processed_ids.add(post.id)
                    sent_post_ids.append(post.id)
                    logger.info(f"Successfully sent post {post.id}")
                    # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    await asyncio.sleep(self.retry_delay)
                else:
                    # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –Ω–µ –ø–æ–º–µ—á–∞–µ–º –ø–æ—Å—Ç –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π
                    logger.error(f"Failed to send post {post.id}")
                    # –û—á–∏—â–∞–µ–º _processed_ids –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                    self._processed_ids.discard(post.id)
                    # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    await asyncio.sleep(self.retry_delay)

            except Exception as e:
                logger.error(f"Error processing post {post.id}: {str(e)}")
                # –ü—Ä–∏ –æ—à–∏–±–∫–µ —Ç–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º _processed_ids –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞
                self._processed_ids.discard(post.id)
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                await asyncio.sleep(self.retry_delay)

        return sent_post_ids 